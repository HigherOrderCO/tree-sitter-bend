================================================================================
Fun Type Definition
================================================================================

type Name
  = (Ctr1 arg1 arg2)
  | Ctr2
  | (abcd)

type Name2 = (Ctr1 arg1 arg2) | Ctr2 | Ctr3

type Tree
  = (Leaf value)
  | (Node ~left ~right)
  | Nil

--------------------------------------------------------------------------------

(source_file
  (fun_type_definition
    (identifier)
    (fun_type_constructor
      (identifier)
      (fun_type_constructor_fields
        (identifier)
        (identifier)))
    (fun_type_constructor
      (identifier))
    (fun_type_constructor
      (identifier)))
  (fun_type_definition
    (identifier)
    (fun_type_constructor
      (identifier)
      (fun_type_constructor_fields
        (identifier)
        (identifier)))
    (fun_type_constructor
      (identifier))
    (fun_type_constructor
      (identifier)))
  (fun_type_definition
    (identifier)
    (fun_type_constructor
      (identifier)
      (fun_type_constructor_fields
        (identifier)))
    (fun_type_constructor
      (identifier)
      (fun_type_constructor_fields
        (identifier)
        (identifier)))
    (fun_type_constructor
      (identifier))))

================================================================================
Fun Function Definition
================================================================================

main = F
identity x = x
(Bool.neg True)  = False
MapMaybe None f = None
Pair.get (fst, snd) f = (f fst snd)
MapMaybe (Some val) f = True

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    name: (identifier)
    (body
      (identifier)))
  (fun_function_definition
    name: (identifier)
    (pattern
      (identifier))
    (body
      (identifier)))
  (fun_function_definition
    name: (identifier)
    (pattern
      (identifier))
    (body
      (identifier)))
  (fun_function_definition
    name: (identifier)
    (pattern
      (identifier))
    (pattern
      (identifier))
    (body
      (identifier)))
  (fun_function_definition
    name: (identifier)
    (pattern
      (tuple
        (identifier)
        (identifier)))
    (pattern
      (identifier))
    (body
      (fun_application
        (identifier)
        (identifier)
        (identifier))))
  (fun_function_definition
    name: (identifier)
    (pattern
      (pattern_constructor
        (identifier)
        (identifier)))
    (pattern
      (identifier))
    (body
      (identifier))))

================================================================================
Import Definition
================================================================================

import this
import ../utils/helper

from that import this
from ./utils import helper

--------------------------------------------------------------------------------

(source_file
  (import_name
    (os_path))
  (import_name
    (os_path))
  (import_from
    (os_path)
    (os_path))
  (import_from
    (os_path)
    (os_path)))

================================================================================
HVM Definition
================================================================================

# log(x: f24, base: f24) -> f24
# Computes the logarithm of `x` with the specified `base`.
hvm log:
  (x ($([|] $(x ret)) ret))

# atan2(x: f24, y: f24) -> f24
# Has the same behaviour as `atan2f` in the C math lib.
# Computes the arctangent of the quotient of its two arguments.
hvm atan2:
  ($([&] $(y ret)) (y ret))

# to_f24(x: native number) -> f24
# Casts any native number to an f24.
hvm to_f24:
  ($([f24] ret) ret)

# to_u24(x: native number) -> u24
# Casts any native number to a u24.
hvm to_u24:
  ($([u24] ret) ret)

# to_i24(x: native number) -> i24
# Casts any native number to an i24.
hvm to_i24:
  ($([i24] ret) ret)

--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (hvm_definition
    (identifier)
    (hvm_code))
  (comment)
  (comment)
  (comment)
  (hvm_definition
    (identifier)
    (hvm_code))
  (comment)
  (comment)
  (hvm_definition
    (identifier)
    (hvm_code))
  (comment)
  (comment)
  (hvm_definition
    (identifier)
    (hvm_code))
  (comment)
  (comment)
  (hvm_definition
    (identifier)
    (hvm_code)))
