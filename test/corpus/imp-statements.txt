================================================================================
Assignment Statement
================================================================================

def main():
  a = 1;
  b <- 2;
  (first, second) = (1, 2)
  {x y} = {2 3}

--------------------------------------------------------------------------------


(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (assignment_statement
        (identifier)
        (integer))
      (ask_statement
        (identifier)
        (integer))
      (assignment_statement
        (tuple
          (identifier)
          (identifier))
        (tuple
          (integer)
          (integer)))
      (assignment_statement
        (superposition
          (identifier)
          (identifier))
        (superposition
          (integer)
          (integer))))))


================================================================================
Use Statement
================================================================================

def main():
  use x = 2 + 3;
  use x = abc

--------------------------------------------------------------------------------


(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (use_statement
        (identifier)
        (binary_op
          (integer)
          (integer)))
      (use_statement
        (identifier)
        (identifier)))))

================================================================================
In-place operator
================================================================================

def main():
  a += 1;
  b *= 2 + 2
  c -= 69
  d /= 42
  e &= 2;
  f |= 3;
  g ^= 4;
  h @= String/uppercase


--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (inplace_op_statement
        (identifier)
        (integer))
      (inplace_op_statement
        (identifier)
        (binary_op
          (integer)
          (integer)))
      (inplace_op_statement
        (identifier)
        (integer))
      (inplace_op_statement
        (identifier)
        (integer))
      (inplace_op_statement
        (identifier)
        (integer))
      (inplace_op_statement
        (identifier)
        (integer))
      (inplace_op_statement
        (identifier)
        (integer))
      (inplace_op_statement
        (identifier)
        (identifier
          (path)
          (identifier))))))

================================================================================
If Statement
================================================================================

def main():
  if a > b:
    return a
  elif a < c:
    return c
  elif d > c:
    return d
  else:
    return b

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (if_statement
        (comparison_op
          (identifier)
          (identifier))
        (body
          (return_statement
            (identifier)))
        (elif_clause
          (comparison_op
            (identifier)
            (identifier))
          (body
            (return_statement
              (identifier))))
        (elif_clause
          (comparison_op
            (identifier)
            (identifier))
          (body
            (return_statement
              (identifier))))
        (else_clause
          (body
            (return_statement
              (identifier))))))))

================================================================================
Bend Statement 1
================================================================================

def main():
  bend x = 0:
    when x < 10:
      left = fork(x + 1)
      right = fork(x + 1)
      y = Tree/Node(left, right)
    else:
      y = Tree/Leaf(x)

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (bend_statement
        (args
          (arg_bind
            (identifier)
            (integer)))
        (when_clause
          (comparison_op
            (identifier)
            (integer))
          (body
            (assignment_statement
              (identifier)
              (call_expression
                (identifier)
                (arguments
                  (binary_op
                    (identifier)
                    (integer)))))
            (assignment_statement
              (identifier)
              (call_expression
                (identifier)
                (arguments
                  (binary_op
                    (identifier)
                    (integer)))))
            (assignment_statement
              (identifier)
              (call_expression
                (identifier
                  (path)
                  (identifier))
                (arguments
                  (identifier)
                  (identifier))))))
        (else_clause
          (body
            (assignment_statement
              (identifier)
              (call_expression
                (identifier
                  (path)
                  (identifier))
                (arguments
                  (identifier))))))))))

================================================================================
Bend Statement 2
================================================================================

def main():
  a = 0
  bend idx = 0, a, b = 0:
    when idx < 10:
      sum = idx + fork(idx + 1)
    else:
      sum = 0
  return sum

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (assignment_statement
        (identifier)
        (integer))
      (bend_statement
        (args
          (arg_bind
            (identifier)
            (integer))
          (identifier)
          (arg_bind
            (identifier)
            (integer)))
        (when_clause
          (comparison_op
            (identifier)
            (integer))
          (body
            (assignment_statement
              (identifier)
              (binary_op
                (identifier)
                (call_expression
                  (identifier)
                  (arguments
                    (binary_op
                      (identifier)
                      (integer))))))))
        (else_clause
          (body
            (assignment_statement
              (identifier)
              (integer)))))
      (return_statement
        (identifier)))))

================================================================================
Fold Statement 1
================================================================================

def main():
  fold x = Tree/leaf:
    case Tree/node:
      return x.value + x.left + x.right
    case Tree/leaf:
      return 0

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (fold_statement
        (arg
          (arg_bind
            (identifier)
            (identifier
              (path)
              (identifier))))
        (body
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (return_statement
                (binary_op
                  (binary_op
                    (identifier)
                    (identifier))
                  (identifier)))))
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (return_statement
                (integer)))))))))


================================================================================
Fold Statement 2
================================================================================

def reverse(list):
  fold list with acc=[]:
    case List/Nil:
      ret = acc
    case List/Cons:
      ret = list.tail(List/Cons(list.head, acc))
  return ret

def main():
  return reverse([1,2,3])

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters
      (identifier))
    (body
      (fold_statement
        (arg
          (identifier))
        (with_args
          (arg_bind
            (identifier)
            (list)))
        (body
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (assignment_statement
                (identifier)
                (identifier))))
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (assignment_statement
                (identifier)
                (call_expression
                  (identifier)
                  (arguments
                    (call_expression
                      (identifier
                        (path)
                        (identifier))
                      (arguments
                        (identifier)
                        (identifier))))))))))
      (return_statement
        (identifier))))
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (return_statement
        (call_expression
          (identifier)
          (arguments
            (list
              (integer)
              (integer)
              (integer))))))))

================================================================================
Fold Statement 3
================================================================================

def reverse(l):
  empty = []
  fold list=l with acc=[], empty:
    case List/Nil:
      ret = acc
    case List/Cons:
      ret = list.tail(List/Cons(list.head, acc), empty)
  return ret

def main():
  return reverse([1,2,3])

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters
      (identifier))
    (body
      (assignment_statement
        (identifier)
        (list))
      (fold_statement
        (arg
          (arg_bind
            (identifier)
            (identifier)))
        (with_args
          (arg_bind
            (identifier)
            (list))
          (identifier))
        (body
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (assignment_statement
                (identifier)
                (identifier))))
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (assignment_statement
                (identifier)
                (call_expression
                  (identifier)
                  (arguments
                    (call_expression
                      (identifier
                        (path)
                        (identifier))
                      (arguments
                        (identifier)
                        (identifier)))
                    (identifier))))))))
      (return_statement
        (identifier))))
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (return_statement
        (call_expression
          (identifier)
          (arguments
            (list
              (integer)
              (integer)
              (integer))))))))

================================================================================
Match Statement 1
================================================================================

def main():
  match x = Option/None:
    case Option/Some:
      y = x.value
    case Option/None:
      y = 0

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (match_statement
        (arg
          (arg_bind
            (identifier)
            (identifier
              (path)
              (identifier))))
        (body
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (assignment_statement
                (identifier)
                (identifier))))
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (assignment_statement
                (identifier)
                (integer)))))))))

================================================================================
Match Statement 2
================================================================================

def map(g, l):
  match list=l with f=g:
    case List/Nil:
      return []
    case List/Cons:
      return List/Cons(f(list.head), map(f, list.tail))

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters
      (identifier)
      (identifier))
    (body
      (match_statement
        (arg
          (arg_bind
            (identifier)
            (identifier)))
        (with_args
          (arg_bind
            (identifier)
            (identifier)))
        (body
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (return_statement
                (list))))
          (match_case
            (match_pattern
              (identifier
                (path)
                (identifier)))
            (body
              (return_statement
                (call_expression
                  (identifier
                    (path)
                    (identifier))
                  (arguments
                    (call_expression
                      (identifier)
                      (arguments
                        (identifier)))
                    (call_expression
                      (identifier)
                      (arguments
                        (identifier)
                        (identifier)))))))))))))

================================================================================
Switch Statement
================================================================================

def main():
  switch x = 5 with n=0:
    # comment!
    case 0:
      return 6
    case 1:
      return 7
    case _:
      return x-2

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (switch_statement
        (arg
          (arg_bind
            (identifier)
            (integer)))
        (with_args
          (arg_bind
            (identifier)
            (integer)))
        (body
          (comment)
          (switch_case
            (switch_pattern
              (integer))
            (body
              (return_statement
                (integer))))
          (switch_case
            (switch_pattern
              (integer))
            (body
              (return_statement
                (integer))))
          (switch_case
            (switch_pattern)
            (body
              (return_statement
                (identifier)))))))))

================================================================================
Open Statement
================================================================================

def main():
  open Point: p
  open Vec: v;

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    name: (identifier)
    parameters: (parameters)
    (body
      (open_statement
        type: (identifier)
        var: (identifier))
      (open_statement
        type: (identifier)
        var: (identifier)))))

================================================================================
With Statement 1
================================================================================

def main():
  with Result:
    x <- safe_div(2, 0)
    return x

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (with_statement
        (identifier)
        (body
          (ask_statement
            (identifier)
            (call_expression
              (identifier)
              (arguments
                (integer)
                (integer))))
          (return_statement
            (identifier)))))))

================================================================================
With Statement 2
================================================================================

def main():
  with Result:
    x <- div(3, 2)
    a = x
  with Result:
    y <- div(3, 0)
    b = y
  return (a, b)

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (with_statement
        (identifier)
        (body
          (ask_statement
            (identifier)
            (call_expression
              (identifier)
              (arguments
                (integer)
                (integer))))
          (assignment_statement
            (identifier)
            (identifier))))
      (with_statement
        (identifier)
        (body
          (ask_statement
            (identifier)
            (call_expression
              (identifier)
              (arguments
                (integer)
                (integer))))
          (assignment_statement
            (identifier)
            (identifier))))
      (return_statement
        (tuple
          (identifier)
          (identifier))))))

================================================================================
Local definition
================================================================================

def main():
  def f(x):
    return x
  return f(0)

--------------------------------------------------------------------------------

(source_file
  (imp_function_definition
    (identifier)
    (parameters)
    (body
      (local_def_statement
        (identifier)
        (parameters
          (identifier))
        (body
          (return_statement
            (identifier))))
      (return_statement
        (call_expression
          (identifier)
          (arguments
            (integer)))))))
