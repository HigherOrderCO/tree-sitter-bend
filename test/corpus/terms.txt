================================================================================
Let Bindings
================================================================================

v1 = let x = (+ 1 2)
x

v2 = let (fst, snd, era) = (1, 2, *);
(+ fst snd)

v3 = let {f1 f2} = λx x;
(f1 f2)

v4 = let $x = (@x x $x); *

main = (v1, v2, v3, v4)

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (let_bind
        (pattern
          (identifier))
        (let_value
          (num_operator
            (operator)
            (integer)
            (integer)))
        (let_next
          (identifier)))))
  (fun_function_definition
    (identifier)
    (body
      (let_bind
        (pattern
          (tuple
            (identifier)
            (identifier)
            (identifier)))
        (let_value
          (tuple
            (integer)
            (integer)
            (eraser)))
        (let_next
          (num_operator
            (operator)
            (identifier)
            (identifier))))))
  (fun_function_definition
    (identifier)
    (body
      (let_bind
        (pattern
          (superposition
            (identifier)
            (identifier)))
        (let_value
          (fun_lambda
            (pattern
              (identifier))
            (body
              (identifier))))
        (let_next
          (application
            (identifier)
            (identifier))))))
  (fun_function_definition
    (identifier)
    (body
      (let_bind
        (pattern
          (unscoped_var))
        (let_value
          (application
            (fun_lambda
              (pattern
                (identifier))
              (body
                (identifier)))
            (unscoped_var)))
        (let_next
          (eraser)))))
  (fun_function_definition
    (identifier)
    (body
      (tuple
        (identifier)
        (identifier)
        (identifier)
        (identifier)))))

================================================================================
Fun Lambdas
================================================================================

v1 = λ(fst, snd) snd
v2 = λa let (fst, snd) = a; snd
v3 = λ{x y} (x y)
v4 = λa let {x y} = a; (x y)
v5 = λ$x $x
main = (v1, v2, v3, v4, v5)

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (fun_lambda
        (pattern
          (tuple
            (identifier)
            (identifier)))
        (body
          (identifier)))))
  (fun_function_definition
    (identifier)
    (body
      (fun_lambda
        (pattern
          (identifier))
        (body
          (let_bind
            (pattern
              (tuple
                (identifier)
                (identifier)))
            (let_value
              (identifier))
            (let_next
              (identifier)))))))
  (fun_function_definition
    (identifier)
    (body
      (fun_lambda
        (pattern
          (superposition
            (identifier)
            (identifier)))
        (body
          (application
            (identifier)
            (identifier))))))
  (fun_function_definition
    (identifier)
    (body
      (fun_lambda
        (pattern
          (identifier))
        (body
          (let_bind
            (pattern
              (superposition
                (identifier)
                (identifier)))
            (let_value
              (identifier))
            (let_next
              (application
                (identifier)
                (identifier))))))))
  (fun_function_definition
    (identifier)
    (body
      (fun_lambda
        (pattern
          (unscoped_var))
        (body
          (unscoped_var)))))
  (fun_function_definition
        (identifier)
        (body
          (tuple
            (identifier)
            (identifier)
            (identifier)
            (identifier)
            (identifier)))))

================================================================================
Use Term
================================================================================

main = use x = (+ 2 3)
(+ x x)

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (use
        (identifier)
        (use_value
          (num_operator
            (operator)
            (integer)
            (integer)))
        (use_next
          (num_operator
            (operator)
            (identifier)
            (identifier)))))))

================================================================================
Match Term
================================================================================

type Opt = (Some val) | None

f1 opt = match opt = (Opt/Some "Bend") {
  Opt/Some: opt.val
  Opt/None: "No name"
}

v2 = match [] {
  List/Cons: 1
  _: 2
}

main = ((f1 (Opt/Some "hi!")), v2)

--------------------------------------------------------------------------------

(source_file
  (fun_type_definition
    (identifier)
    (fun_type_constructor
      (identifier)
      (fun_type_constructor_fields
        (identifier)))
    (fun_type_constructor
      (identifier)))
  (fun_function_definition
    (identifier)
    (pattern
      (identifier))
    (body
      (fun_match
        (arg
          (arg_bind
            (identifier)
            (application
              (identifier)
              (string))))
        (body
          (match_case
            (match_pattern
              (identifier))
            (identifier))
          (match_case
            (match_pattern
              (identifier))
            (string))))))
  (fun_function_definition
    (identifier)
    (body
      (fun_match
        (arg
          (term
            (list)))
        (body
          (match_case
            (match_pattern
              (identifier))
            (integer))
          (match_case
            (match_pattern)
            (integer))))))
  (fun_function_definition
    (identifier)
    (body
      (tuple
        (application
          (identifier)
          (application
            (identifier)
            (string)))
        (identifier)))))

================================================================================
Match Term
================================================================================

main = switch n {
  0: "zero"
  1: "one"
  _: "greater than 1"
}
main = switch x = (+ 1 1) {
  0: 42
  _: x-1
}
--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (fun_switch
        (arg
          (term
            (identifier)))
        (body
          (switch_case
            (switch_pattern
              (integer))
            (string))
          (switch_case
            (switch_pattern
              (integer))
            (string))
          (switch_case
            (switch_pattern)
            (string))))))
  (fun_function_definition
    (identifier)
    (body
      (fun_switch
        (arg
          (arg_bind
            (identifier)
            (num_operator
              (operator)
              (integer)
              (integer))))
        (body
          (switch_case
            (switch_pattern
              (integer))
            (integer))
          (switch_case
            (switch_pattern)
            (switch_predecessor
              (identifier)
              (integer))))))))

================================================================================
If Term
================================================================================

main = if (< 1 2) {
  abc
} else {
  def
}

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (fun_if
        (num_operator
          (operator)
          (integer)
          (integer))
        (body
          (body
            (identifier)))
        (else_clause
          (body
            (identifier)))))))

================================================================================
Bend Term
================================================================================

v1 = bend x = 0 {
  when (< x 3):
    (Tree/Node (fork (+ x 1)) (fork (+ x 1)))
  else:
    (Tree/Leaf x)
}

v2 = bend x = 0, y = 1, z = 2 {
  when (< x 3):
    y
  else:
    z
}

main = (v1, v2)

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (fun_bend
        (bind
          (identifier)
          (integer))
        (when_clause
          (num_operator
            (operator)
            (identifier)
            (integer))
          (body
            (application
              (identifier)
              (application
                (identifier)
                (num_operator
                  (operator)
                  (identifier)
                  (integer)))
              (application
                (identifier)
                (num_operator
                  (operator)
                  (identifier)
                  (integer))))))
        (else_clause
          (body
            (application
              (identifier)
              (identifier)))))))
  (fun_function_definition
    (identifier)
    (body
      (fun_bend
        (bind
          (identifier)
          (integer))
        (bind
          (identifier)
          (integer))
        (bind
          (identifier)
          (integer))
        (when_clause
          (num_operator
            (operator)
            (identifier)
            (integer))
          (body
            (identifier)))
        (else_clause
          (body
            (identifier))))))
      (fun_function_definition
        (identifier)
        (body
          (tuple
            (identifier)
            (identifier)))))

================================================================================
Open Term
================================================================================

object Pair { fst, snd }

main = open Pair x; (+ x.fst x.snd)

--------------------------------------------------------------------------------

(source_file
  (object_definition
    name: (identifier)
    field: (object_field
      (identifier))
    field: (object_field
      (identifier)))
  (fun_function_definition
    name: (identifier)
    (body
      (fun_open
        type: (identifier)
        variable: (identifier)
        (body
          (num_operator
            (operator)
            (identifier)
            (identifier)))))))

================================================================================
With Term
================================================================================

Result/bind self nxt =
  match self {
    Result/Ok: ((undefer nxt) self.val)
    Reslt/Err: (Result/Err self.val)
  }

div a b =
  switch b {
    0: (Result/Err "Div by 0")
    _: (Result/Ok (/ a b))
  }

main =
  use a = with Result {
    ask x = (div 3 2)
    x
  }
  use b = with Result {
    ask y = (div 3 0)
    y
  }
  (a, b)


--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (pattern
      (identifier))
    (pattern
      (identifier))
    (body
      (fun_match
        (arg
          (term
            (identifier)))
        (body
          (match_case
            (match_pattern
              (identifier))
            (application
              (application
                (identifier)
                (identifier))
              (identifier)))
          (match_case
            (match_pattern
              (identifier))
            (application
              (identifier)
              (identifier)))))))
  (fun_function_definition
    (identifier)
    (pattern
      (identifier))
    (pattern
      (identifier))
    (body
      (fun_switch
        (arg
          (term
            (identifier)))
        (body
          (switch_case
            (switch_pattern
              (integer))
            (application
              (identifier)
              (string)))
          (switch_case
            (switch_pattern)
            (application
              (identifier)
              (num_operator
                (operator)
                (identifier)
                (identifier))))))))
  (fun_function_definition
    (identifier)
    (body
      (use
        (identifier)
        (use_value
          (fun_with
            (identifier)
            (body
              (fun_ask
                (pattern
                  (identifier))
                (body
                  (application
                    (identifier)
                    (integer)
                    (integer)))
                (ask_next
                  (identifier))))))
        (use_next
          (use
            (identifier)
            (use_value
              (fun_with
                (identifier)
                (body
                  (fun_ask
                    (pattern
                      (identifier))
                    (body
                      (application
                        (identifier)
                        (integer)
                        (integer)))
                    (ask_next
                      (identifier))))))
            (use_next
              (tuple
                (identifier)
                (identifier)))))))))

================================================================================
Nat Term
================================================================================

Main = #3

--------------------------------------------------------------------------------

(source_file
  (fun_function_definition
    (identifier)
    (body
      (nat
        (integer)))))
